package registrations

import (
	"cloud.google.com/go/firestore"
	"context"
	"countries-dashboard-service/resources"
	"encoding/json"
	"log"
	"net/http"
	"time"
)

func CreatePOSTRequest(ctx context.Context, client *firestore.Client, w http.ResponseWriter,
	data resources.RegistrationsPOSTandPUT) (string, error) {
	postRegistration := map[string]interface{}{
		"country": data.Country,
		"isoCode": data.IsoCode,
		"features": map[string]interface{}{
			"temperature":      data.Features.Temperature,
			"precipitation":    data.Features.Precipitation,
			"capital":          data.Features.Capital,
			"coordinates":      data.Features.Coordinates,
			"population":       data.Features.Population,
			"area":             data.Features.Area,
			"targetCurrencies": data.Features.TargetCurrencies,
		}}

	// Create a new document with an autogenerated ID.
	newDocumentRef, _, err := client.Collection(resources.REGISTRATIONS_COLLECTION).Add(ctx, postRegistration)
	if err != nil {
		log.Println("An error occurred when creating a new document:", err.Error())
		http.Error(w, "An error occurred when creating a new document.", http.StatusInternalServerError)
	} else {
		log.Println("Document added to the registrations collection. " +
			"Identifier of the added document: " + newDocumentRef.ID)
	}
	return newDocumentRef.ID, nil
}

func CreatePOSTResponse() (resources.RegistrationsPOSTResponse, error) {
	allDocuments, _ := GetAllRegisteredDocuments()
	nextId := len(allDocuments) + 1

	return resources.RegistrationsPOSTResponse{
		Id:         nextId,
		LastChange: time.Now().Format("20060102 15:04"),
	}, nil
}

func UpdatePOSTRequest(ctx context.Context, client *firestore.Client, w http.ResponseWriter,
	documentID string, postResponse resources.RegistrationsPOSTResponse) {
	postResponseMap := make(map[string]interface{})
	jsonString, err1 := json.Marshal(&postResponse)
	if err1 != nil {
		log.Println("Unable to marshal the POST response: ", err1.Error())
		http.Error(w, resources.ENCODING_ERROR+"of the POST response data.", http.StatusInternalServerError)
		return
	}

	err2 := json.Unmarshal(jsonString, &postResponseMap)
	if err2 != nil {
		log.Println("Unable to unmarshal the POST response: ", err2.Error())
		http.Error(w, resources.DECODING_ERROR+"of the POST response data.", http.StatusInternalServerError)
		return
	}

	// Update document with id and lastChange fields.
	_, err3 := client.Collection(resources.REGISTRATIONS_COLLECTION).Doc(documentID).Set(ctx,
		postResponseMap, firestore.MergeAll)

	if err3 != nil {
		log.Println("The id and lastChange fields could not be set: ", err3.Error())
		http.Error(w, "An error occurred when setting the id and last change"+
			" timestamp of the new registration, Please try again. ", http.StatusInternalServerError)
	}

}
